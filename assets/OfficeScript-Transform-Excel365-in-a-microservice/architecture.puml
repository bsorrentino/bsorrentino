@startuml

'autonumber

!include powerapps.png.puml
!include powerautomate.png.puml
!include dataverse.png.puml
!include excel.png.puml
!include outlook.png.puml
!include function.png.puml
!include aibuilder.png.puml

left to right direction
'top to bottom direction
'skinparam linetype ortho

rectangle "Outlook\n<$outlook,scale=.4,color=blue>" as MAIL
rectangle "Flow\n<$powerautomate,scale=.4,color=blue>" as trigger
rectangle "Flow\n<$powerautomate,scale=.4,color=blue>" as NEWEXCEL
rectangle "Text\nAnalysys" as TA
rectangle "Dataverse\n <$dataverse,scale=.4,color=green>" as CDS
rectangle "Canvas App\n   <$powerapps,scale=.4,color=purple>" as App
rectangle "Excel\n <$excel,scale=.4,color=green>" as Excel
rectangle "Function\n <$function,scale=.4,color=red>" as FUNC
rectangle "AI Model\n <$aibuilder,scale=.4,color=purple>" as AI #line.dashed


actor Approver
actor Validator

MAIL <-- trigger : 1. trigger
trigger <-> TA : 2. submit
TA -> FUNC: 2.1 invoke
TA -[#gray,dotted,thickness=5]-> AI: analyse
note right
This is a possible "low-code" solution
using the text analyzer provided by
Power Platform  <b>AIBuilder
end note

trigger --> CDS : 3. Save

App -> CDS :  4. Read
Approver --> App : 5. Approve
App --> NEWEXCEL : 6. Run
NEWEXCEL -> Excel: 7. Generate Excel
Excel <-- Validator: 8. Validate & Share
@enduml
