
From IOS 15 swiftUI has been enriched of new (wished) functionalities. One of the most useful in my opinion is the new modifier [searchable](https://developer.apple.com/documentation/swiftui/form/searchable(text:placement:))
that allow to achieve in pretty straightforward way a full working search bar.

Form first announcement I couldn't wait to use it and as soon as I've updated my XCode I started to refactor one of the my iOS app from UIKit couple UITableViewController + UISearchController to swiftUI List + Searchable modifier.

I've applied it on top of a `List` and it worked as expected but the problem was that I would want to use `@FetchRequest` property wrapper  but it seemed not thought for use it in a dynamic filtering scenario like when we want to use with a search bar.

So the problem was:  is it possible to use use `@FetchRequest` to perform dynamic filtering ?.

Luckily I land on this [article]8https://www.hackingwithswift.com/books/ios-swiftui/dynamically-filtering-fetchrequest-with-swiftui) from amazing [Paul Hudson](https://twitter.com/twostraws?s=20) that teach how is possible use `@FetchRequest` property wrapper for dynamic filtering so i decided to
apply the provided solution in my project and develop a more generic SwiftUI View `DynamicFetchRequestView` allowing to apply the dynamic filtering in different scenarios.

Following the View's code

```swift
struct DynamicFetchRequestView<T: NSManagedObject, Content: View>: View {

    // That will store our fetch request, so that we can loop over it inside the body.
    // However, we don’t create the fetch request here, because we still don’t know what we’re searching for.
    // Instead, we’re going to create custom initializer(s) that accepts filtering information to set the fetchRequest property.
    @FetchRequest var fetchRequest: FetchedResults<T>

    // this is our content closure; we'll call this once the fetch results is available
    let content: (FetchedResults<T>) -> Content

    var body: some View {
        self.content(fetchRequest)
    }

    // This is a generic initializer that allow to provide all filtering information
    init( withPredicate predicate: NSPredicate, andSortDescriptor sortDescriptors: [NSSortDescriptor] = [],  @ViewBuilder content: @escaping (FetchedResults<T>) -> Content) {
        _fetchRequest = FetchRequest<T>(sortDescriptors: sortDescriptors, predicate: predicate)
        self.content = content
    }

    // This initializer allows to provide a complete custom NSFetchRequest
    init( withFetchRequest request:NSFetchRequest<T>,  @ViewBuilder content: @escaping (FetchedResults<T>) -> Content) {
        _fetchRequest = FetchRequest<T>(fetchRequest: request)
        self.content = content
    }

}
```

## Usage

Let's image to have a Data Object named `Account`

```swift

class Account : NSManagedObject {

  @NSManaged public var name: String
  @NSManaged public var age: NSNumber
}

```

`DynamicFetchRequestView` Extension for `Account` entity

```Swift
// Initializer for Account
extension DynamicFetchRequestView where T : Account {

    init( withSearchText searchText: String, @ViewBuilder content: @escaping (FetchedResults<T>) -> Content) {

        let search_criteria = "name CONTAINS[c] %@"
        let predicate = NSPredicate(format: search_criteria, searchText )

        self.init( withPredicate: predicate, content: content)
    }
}
```

Put all together

```Swift
struct AccountList: View {
    @Environment(\.managedObjectContext) var managedObjectContext

    @State private var searchText = ""

    var body: some View {

        NavigationView {

            DynamicFetchRequestView( withSearchText: searchText ) { results in

                let groupByFirstCharacter = Dictionary( grouping: results, by: { $0.name.first! })

                List {
                    ForEach( groupByFirstCharacter.keys.sorted(), id: \.self ) { section in
                        Section( header: Text( String(section) ) ) {

                            ForEach( groupByFirstCharacter[section]!, id: \.self ) { account in

                                HStack {
                                  Text( account.name )
                                  Text( "\(account.age)" )
                                }
                            }
                        }
                    }
                }

            }
            .searchable(text: $searchText, placement: .automatic, prompt: "search keys")
            .navigationBarTitle( Text("Account List"), displayMode: .inline )

        }
    }
}
```
